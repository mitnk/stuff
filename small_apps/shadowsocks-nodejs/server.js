// Generated by CoffeeScript 1.4.0
(function() {
  var Encryptor, METHOD, args, config, configContent, configFile, configFromArgs, fs, inetAton, inetNtoa, k, key, net, path, port, portPassword, timeout, util, v, _fn;

  net = require("net");

  fs = require("fs");

  path = require("path");

  util = require('util');

  args = require("./args");

  Encryptor = require("./encrypt").Encryptor;

  console.log(args.version);

  inetNtoa = function(buf) {
    return buf[0] + "." + buf[1] + "." + buf[2] + "." + buf[3];
  };

  inetAton = function(ipStr) {
    var buf, i, parts;
    parts = ipStr.split(".");
    if (parts.length !== 4) {
      return null;
    } else {
      buf = new Buffer(4);
      i = 0;
      while (i < 4) {
        buf[i] = +parts[i];
        i++;
      }
      return buf;
    }
  };

  configFromArgs = args.parseArgs();

  configFile = configFromArgs.config_file || path.resolve(__dirname, "config.json");

  configContent = fs.readFileSync(configFile);

  config = JSON.parse(configContent);

  for (k in configFromArgs) {
    v = configFromArgs[k];
    config[k] = v;
  }

  timeout = Math.floor(config.timeout * 1000);

  portPassword = config.port_password;

  port = config.server_port;

  key = config.password;

  METHOD = config.method;

  if (portPassword) {
    if (port || key) {
      util.log('warning: port_password should not be used with server_port and password. server_port and password will be ignored');
    }
  } else {
    portPassword = {};
    portPassword[port.toString()] = key;
  }

  _fn = function() {
    var KEY, PORT, server;
    PORT = port;
    KEY = key;
    server = net.createServer(function(connection) {
      var addrLen, cachedPieces, encryptor, headerLength, remote, remoteAddr, remotePort, stage;
      encryptor = new Encryptor(KEY, METHOD);
      stage = 0;
      headerLength = 0;
      remote = null;
      cachedPieces = [];
      addrLen = 0;
      remoteAddr = null;
      remotePort = null;
      connection.on("data", function(data) {
        var addrtype, buf;
        data = encryptor.decrypt(data);
        if (stage === 5) {
          if (!remote.write(data)) {
            connection.pause();
          }
          return;
        }
        if (stage === 0) {
          try {
            addrtype = data[0];
            if (addrtype === 3) {
              addrLen = data[1];
            } else if (addrtype !== 1) {
              util.log("unsupported addrtype: " + addrtype);
              console.log(data);
              connection.end();
              return;
            }
            if (addrtype === 1) {
              remoteAddr = inetNtoa(data.slice(1, 5));
              remotePort = data.readUInt16BE(5);
              headerLength = 7;
            } else {
              remoteAddr = data.slice(2, 2 + addrLen).toString("binary");
              remotePort = data.readUInt16BE(2 + addrLen);
              headerLength = 2 + addrLen + 2;
            }
            remote = net.connect(remotePort, remoteAddr, function() {
              var i, piece;
              util.log("connecting " + remoteAddr + ":" + remotePort);
              i = 0;
              while (i < cachedPieces.length) {
                piece = cachedPieces[i];
                remote.write(piece);
                i++;
              }
              cachedPieces = null;
              return stage = 5;
            });
            remote.on("data", function(data) {
              data = encryptor.encrypt(data);
              if (!connection.write(data)) {
                return remote.pause();
              }
            });
            remote.on("end", function() {
              return connection.end();
            });
            remote.on("error", function(e) {
              util.log("remote " + remoteAddr + ":" + remotePort + " error: " + e);
              return connection.destroy();
            });
            remote.on("drain", function() {
              return connection.resume();
            });
            remote.setTimeout(timeout, function() {
              connection.end();
              return remote.destroy();
            });
            if (data.length > headerLength) {
              buf = new Buffer(data.length - headerLength);
              data.copy(buf, 0, headerLength);
              cachedPieces.push(buf);
              buf = null;
            }
            return stage = 4;
          } catch (e) {
            util.log(e);
            connection.destroy();
            if (remote) {
              return remote.destroy();
            }
          }
        } else {
          if (stage === 4) {
            return cachedPieces.push(data);
          }
        }
      });
      connection.on("end", function() {
        if (remote) {
          return remote.destroy();
        }
      });
      connection.on("error", function(e) {
        util.log("local error: " + e);
        if (remote) {
          return remote.destroy();
        }
      });
      connection.on("drain", function() {
        if (remote) {
          return remote.resume();
        }
      });
      return connection.setTimeout(timeout, function() {
        if (remote) {
          remote.destroy();
        }
        return connection.destroy();
      });
    });
    server.listen(PORT, function() {
      return util.log("server listening at port " + PORT);
    });
    return server.on("error", function(e) {
      if (e.code === "EADDRINUSE") {
        return util.warn("Address in use, aborting");
      }
    });
  };
  for (port in portPassword) {
    key = portPassword[port];
    _fn();
  }

}).call(this);
